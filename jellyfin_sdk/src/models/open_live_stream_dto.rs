/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.11
 * 
 * Generated by: https://openapi-generator.tech
 */

/// OpenLiveStreamDto : Open live stream dto.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenLiveStreamDto {
    /// Gets or sets the open token.
    #[serde(rename = "OpenToken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub open_token: Option<Option<String>>,
    /// Gets or sets the user id.
    #[serde(rename = "UserId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<Option<uuid::Uuid>>,
    /// Gets or sets the play session id.
    #[serde(rename = "PlaySessionId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub play_session_id: Option<Option<String>>,
    /// Gets or sets the max streaming bitrate.
    #[serde(rename = "MaxStreamingBitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_streaming_bitrate: Option<Option<i32>>,
    /// Gets or sets the start time in ticks.
    #[serde(rename = "StartTimeTicks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start_time_ticks: Option<Option<i64>>,
    /// Gets or sets the audio stream index.
    #[serde(rename = "AudioStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub audio_stream_index: Option<Option<i32>>,
    /// Gets or sets the subtitle stream index.
    #[serde(rename = "SubtitleStreamIndex", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subtitle_stream_index: Option<Option<i32>>,
    /// Gets or sets the max audio channels.
    #[serde(rename = "MaxAudioChannels", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_audio_channels: Option<Option<i32>>,
    /// Gets or sets the item id.
    #[serde(rename = "ItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub item_id: Option<Option<uuid::Uuid>>,
    /// Gets or sets a value indicating whether to enable direct play.
    #[serde(rename = "EnableDirectPlay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_direct_play: Option<Option<bool>>,
    /// Gets or sets a value indicating whether to enale direct stream.
    #[serde(rename = "EnableDirectStream", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub enable_direct_stream: Option<Option<bool>>,
    #[serde(rename = "DeviceProfile", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_profile: Option<Option<Box<crate::models::ClientCapabilitiesDtoDeviceProfile>>>,
    /// Gets or sets the device play protocols.
    #[serde(rename = "DirectPlayProtocols", skip_serializing_if = "Option::is_none")]
    pub direct_play_protocols: Option<Vec<crate::models::MediaProtocol>>,
}

impl OpenLiveStreamDto {
    /// Open live stream dto.
    pub fn new() -> OpenLiveStreamDto {
        OpenLiveStreamDto {
            open_token: None,
            user_id: None,
            play_session_id: None,
            max_streaming_bitrate: None,
            start_time_ticks: None,
            audio_stream_index: None,
            subtitle_stream_index: None,
            max_audio_channels: None,
            item_id: None,
            enable_direct_play: None,
            enable_direct_stream: None,
            device_profile: None,
            direct_play_protocols: None,
        }
    }
}


