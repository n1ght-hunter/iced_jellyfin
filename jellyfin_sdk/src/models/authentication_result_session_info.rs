/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.11
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AuthenticationResultSessionInfo : Class SessionInfo.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthenticationResultSessionInfo {
    #[serde(rename = "PlayState", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub play_state: Option<Option<Box<crate::models::PlayerStateInfo>>>,
    #[serde(rename = "AdditionalUsers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub additional_users: Option<Option<Vec<crate::models::SessionUserInfo>>>,
    #[serde(rename = "Capabilities", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<Option<Box<crate::models::ClientCapabilities>>>,
    /// Gets or sets the remote end point.
    #[serde(rename = "RemoteEndPoint", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub remote_end_point: Option<Option<String>>,
    /// Gets the playable media types.
    #[serde(rename = "PlayableMediaTypes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub playable_media_types: Option<Option<Vec<String>>>,
    /// Gets or sets the id.
    #[serde(rename = "Id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    /// Gets or sets the user id.
    #[serde(rename = "UserId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<uuid::Uuid>,
    /// Gets or sets the username.
    #[serde(rename = "UserName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<Option<String>>,
    /// Gets or sets the type of the client.
    #[serde(rename = "Client", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client: Option<Option<String>>,
    /// Gets or sets the last activity date.
    #[serde(rename = "LastActivityDate", skip_serializing_if = "Option::is_none")]
    pub last_activity_date: Option<String>,
    /// Gets or sets the last playback check in.
    #[serde(rename = "LastPlaybackCheckIn", skip_serializing_if = "Option::is_none")]
    pub last_playback_check_in: Option<String>,
    /// Gets or sets the name of the device.
    #[serde(rename = "DeviceName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_name: Option<Option<String>>,
    /// Gets or sets the type of the device.
    #[serde(rename = "DeviceType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_type: Option<Option<String>>,
    #[serde(rename = "NowPlayingItem", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub now_playing_item: Option<Option<Box<crate::models::SessionInfoNowPlayingItem>>>,
    #[serde(rename = "FullNowPlayingItem", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_now_playing_item: Option<Option<Box<crate::models::SessionInfoFullNowPlayingItem>>>,
    #[serde(rename = "NowViewingItem", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub now_viewing_item: Option<Option<Box<crate::models::SessionInfoNowViewingItem>>>,
    /// Gets or sets the device id.
    #[serde(rename = "DeviceId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<Option<String>>,
    /// Gets or sets the application version.
    #[serde(rename = "ApplicationVersion", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub application_version: Option<Option<String>>,
    #[serde(rename = "TranscodingInfo", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub transcoding_info: Option<Option<Box<crate::models::TranscodingInfo>>>,
    /// Gets a value indicating whether this instance is active.
    #[serde(rename = "IsActive", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    #[serde(rename = "SupportsMediaControl", skip_serializing_if = "Option::is_none")]
    pub supports_media_control: Option<bool>,
    #[serde(rename = "SupportsRemoteControl", skip_serializing_if = "Option::is_none")]
    pub supports_remote_control: Option<bool>,
    #[serde(rename = "NowPlayingQueue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub now_playing_queue: Option<Option<Vec<crate::models::QueueItem>>>,
    #[serde(rename = "NowPlayingQueueFullItems", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub now_playing_queue_full_items: Option<Option<Vec<crate::models::BaseItemDto>>>,
    #[serde(rename = "HasCustomDeviceName", skip_serializing_if = "Option::is_none")]
    pub has_custom_device_name: Option<bool>,
    #[serde(rename = "PlaylistItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub playlist_item_id: Option<Option<String>>,
    #[serde(rename = "ServerId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub server_id: Option<Option<String>>,
    #[serde(rename = "UserPrimaryImageTag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_primary_image_tag: Option<Option<String>>,
    /// Gets the supported commands.
    #[serde(rename = "SupportedCommands", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub supported_commands: Option<Option<Vec<crate::models::GeneralCommandType>>>,
}

impl AuthenticationResultSessionInfo {
    /// Class SessionInfo.
    pub fn new() -> AuthenticationResultSessionInfo {
        AuthenticationResultSessionInfo {
            play_state: None,
            additional_users: None,
            capabilities: None,
            remote_end_point: None,
            playable_media_types: None,
            id: None,
            user_id: None,
            user_name: None,
            client: None,
            last_activity_date: None,
            last_playback_check_in: None,
            device_name: None,
            device_type: None,
            now_playing_item: None,
            full_now_playing_item: None,
            now_viewing_item: None,
            device_id: None,
            application_version: None,
            transcoding_info: None,
            is_active: None,
            supports_media_control: None,
            supports_remote_control: None,
            now_playing_queue: None,
            now_playing_queue_full_items: None,
            has_custom_device_name: None,
            playlist_item_id: None,
            server_id: None,
            user_primary_image_tag: None,
            supported_commands: None,
        }
    }
}


