/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.11
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TranscodingInfo {
    #[serde(rename = "AudioCodec", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub audio_codec: Option<Option<String>>,
    #[serde(rename = "VideoCodec", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video_codec: Option<Option<String>>,
    #[serde(rename = "Container", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub container: Option<Option<String>>,
    #[serde(rename = "IsVideoDirect", skip_serializing_if = "Option::is_none")]
    pub is_video_direct: Option<bool>,
    #[serde(rename = "IsAudioDirect", skip_serializing_if = "Option::is_none")]
    pub is_audio_direct: Option<bool>,
    #[serde(rename = "Bitrate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<Option<i32>>,
    #[serde(rename = "Framerate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub framerate: Option<Option<f32>>,
    #[serde(rename = "CompletionPercentage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub completion_percentage: Option<Option<f64>>,
    #[serde(rename = "Width", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub width: Option<Option<i32>>,
    #[serde(rename = "Height", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub height: Option<Option<i32>>,
    #[serde(rename = "AudioChannels", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub audio_channels: Option<Option<i32>>,
    #[serde(rename = "HardwareAccelerationType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hardware_acceleration_type: Option<Option<crate::models::HardwareEncodingType>>,
    #[serde(rename = "TranscodeReasons", skip_serializing_if = "Option::is_none")]
    pub transcode_reasons: Option<Vec<crate::models::TranscodeReason>>,
}

impl TranscodingInfo {
    pub fn new() -> TranscodingInfo {
        TranscodingInfo {
            audio_codec: None,
            video_codec: None,
            container: None,
            is_video_direct: None,
            is_audio_direct: None,
            bitrate: None,
            framerate: None,
            completion_percentage: None,
            width: None,
            height: None,
            audio_channels: None,
            hardware_acceleration_type: None,
            transcode_reasons: None,
        }
    }
}


