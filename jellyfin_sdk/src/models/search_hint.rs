/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.11
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SearchHint : Class SearchHintResult.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchHint {
    /// Gets or sets the item id.
    #[serde(rename = "ItemId", skip_serializing_if = "Option::is_none")]
    pub item_id: Option<uuid::Uuid>,
    #[serde(rename = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// Gets or sets the name.
    #[serde(rename = "Name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    /// Gets or sets the matched term.
    #[serde(rename = "MatchedTerm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub matched_term: Option<Option<String>>,
    /// Gets or sets the index number.
    #[serde(rename = "IndexNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub index_number: Option<Option<i32>>,
    /// Gets or sets the production year.
    #[serde(rename = "ProductionYear", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub production_year: Option<Option<i32>>,
    /// Gets or sets the parent index number.
    #[serde(rename = "ParentIndexNumber", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_index_number: Option<Option<i32>>,
    /// Gets or sets the image tag.
    #[serde(rename = "PrimaryImageTag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_image_tag: Option<Option<String>>,
    /// Gets or sets the thumb image tag.
    #[serde(rename = "ThumbImageTag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub thumb_image_tag: Option<Option<String>>,
    /// Gets or sets the thumb image item identifier.
    #[serde(rename = "ThumbImageItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub thumb_image_item_id: Option<Option<String>>,
    /// Gets or sets the backdrop image tag.
    #[serde(rename = "BackdropImageTag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub backdrop_image_tag: Option<Option<String>>,
    /// Gets or sets the backdrop image item identifier.
    #[serde(rename = "BackdropImageItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub backdrop_image_item_id: Option<Option<String>>,
    /// Gets or sets the type.
    #[serde(rename = "Type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<String>>,
    #[serde(rename = "IsFolder", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_folder: Option<Option<bool>>,
    /// Gets or sets the run time ticks.
    #[serde(rename = "RunTimeTicks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub run_time_ticks: Option<Option<i64>>,
    /// Gets or sets the type of the media.
    #[serde(rename = "MediaType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub media_type: Option<Option<String>>,
    #[serde(rename = "StartDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<Option<String>>,
    #[serde(rename = "EndDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<Option<String>>,
    /// Gets or sets the series.
    #[serde(rename = "Series", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub series: Option<Option<String>>,
    #[serde(rename = "Status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status: Option<Option<String>>,
    /// Gets or sets the album.
    #[serde(rename = "Album", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub album: Option<Option<String>>,
    #[serde(rename = "AlbumId", skip_serializing_if = "Option::is_none")]
    pub album_id: Option<uuid::Uuid>,
    /// Gets or sets the album artist.
    #[serde(rename = "AlbumArtist", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub album_artist: Option<Option<String>>,
    /// Gets or sets the artists.
    #[serde(rename = "Artists", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub artists: Option<Option<Vec<String>>>,
    /// Gets or sets the song count.
    #[serde(rename = "SongCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub song_count: Option<Option<i32>>,
    /// Gets or sets the episode count.
    #[serde(rename = "EpisodeCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub episode_count: Option<Option<i32>>,
    /// Gets or sets the channel identifier.
    #[serde(rename = "ChannelId", skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<uuid::Uuid>,
    /// Gets or sets the name of the channel.
    #[serde(rename = "ChannelName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub channel_name: Option<Option<String>>,
    /// Gets or sets the primary image aspect ratio.
    #[serde(rename = "PrimaryImageAspectRatio", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_image_aspect_ratio: Option<Option<f64>>,
}

impl SearchHint {
    /// Class SearchHintResult.
    pub fn new() -> SearchHint {
        SearchHint {
            item_id: None,
            id: None,
            name: None,
            matched_term: None,
            index_number: None,
            production_year: None,
            parent_index_number: None,
            primary_image_tag: None,
            thumb_image_tag: None,
            thumb_image_item_id: None,
            backdrop_image_tag: None,
            backdrop_image_item_id: None,
            r#type: None,
            is_folder: None,
            run_time_ticks: None,
            media_type: None,
            start_date: None,
            end_date: None,
            series: None,
            status: None,
            album: None,
            album_id: None,
            album_artist: None,
            artists: None,
            song_count: None,
            episode_count: None,
            channel_id: None,
            channel_name: None,
            primary_image_aspect_ratio: None,
        }
    }
}


